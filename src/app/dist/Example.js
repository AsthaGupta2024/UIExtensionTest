(function(React2, react) {
  "use strict";
  function extend_V2(renderExtensionCallback) {
    return self.extend_V2(renderExtensionCallback);
  }
  function serverless(name, options) {
    return self.serverless(name, options);
  }
  function fetch(url, options) {
    return self.hsFetch(url, options);
  }
  const hubspot = {
    extend: extend_V2,
    serverless,
    fetch
  };
  react.createRemoteReactComponent("Alert");
  const Button = react.createRemoteReactComponent("Button", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("ButtonRow");
  const Card = react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  const Divider = react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image", {
    fragmentProps: ["overlay"]
  });
  const Input = react.createRemoteReactComponent("Input");
  const Link = react.createRemoteReactComponent("Link", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  react.createRemoteReactComponent("Tag", {
    fragmentProps: ["overlay"]
  });
  const Text = react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  react.createRemoteReactComponent("StatisticsItem");
  react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  const Flex = react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  react.createRemoteReactComponent("Checkbox");
  react.createRemoteReactComponent("RadioButton");
  react.createRemoteReactComponent("List");
  react.createRemoteReactComponent("Toggle");
  react.createRemoteReactComponent("Dropdown");
  react.createRemoteReactComponent("Panel");
  react.createRemoteReactComponent("PanelFooter");
  react.createRemoteReactComponent("PanelBody");
  react.createRemoteReactComponent("PanelSection");
  react.createRemoteReactComponent("StepperInput");
  react.createRemoteReactComponent("Modal");
  react.createRemoteReactComponent("ModalBody");
  react.createRemoteReactComponent("ModalFooter");
  react.createRemoteReactComponent("Icon");
  react.createRemoteReactComponent("StatusTag");
  react.createRemoteReactComponent("LoadingButton", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("BarChart");
  react.createRemoteReactComponent("LineChart");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  hubspot.extend(({ context, runServerlessFunction, actions }) => /* @__PURE__ */ React2.createElement(
    Extension,
    {
      context,
      runServerless: runServerlessFunction,
      sendAlert: actions.addAlert
    }
  ));
  const Extension = ({ context, runServerless, sendAlert }) => {
    const [text, setText] = React2.useState("");
    const [products, setProducts] = React2.useState([]);
    React2.useEffect(() => {
      const fetchProducts = async () => {
        try {
          const { response } = await runServerless({ name: "myFunc" });
          console.log("Response:", response);
          if (Array.isArray(response)) {
            setProducts(response);
          } else {
            console.error("Unexpected response format:", response);
          }
        } catch (error) {
          console.error("Error fetching products:", error);
        }
      };
      fetchProducts();
    }, []);
    const handleClick = async () => {
      try {
        const { response } = await runServerless({
          name: "myFunc",
          parameters: { text }
        });
        sendAlert({ message: response });
      } catch (error) {
        console.error("Error sending request:", error);
        sendAlert({ message: "Failed to send request" });
      }
    };
    console.log("Rendering Products:", products);
    return /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Text, null, /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Your first UI extension is ready!"), "Congratulations, ", context.user.firstName, "! You just deployed your first HubSpot UI extension."), /* @__PURE__ */ React2.createElement(Flex, { direction: "row", align: "end", gap: "small" }, /* @__PURE__ */ React2.createElement(Input, { name: "text", label: "Send", onInput: (e) => setText(e.target.value) }), /* @__PURE__ */ React2.createElement(Button, { type: "submit", onClick: handleClick }, "Click me")), /* @__PURE__ */ React2.createElement(Divider, null), /* @__PURE__ */ React2.createElement(Text, { format: { fontWeight: "bold" } }, "Fetched Products:"), products.length > 0 ? products.map((product) => {
      console.log("Rendering Product:", product);
      return /* @__PURE__ */ React2.createElement(Card, { key: product.id }, /* @__PURE__ */ React2.createElement(Text, null, product.name));
    }) : /* @__PURE__ */ React2.createElement(Text, null, "No products available."), /* @__PURE__ */ React2.createElement(Divider, null), /* @__PURE__ */ React2.createElement(Text, null, "Learn more about", " ", /* @__PURE__ */ React2.createElement(Link, { href: "https://developers.hubspot.com/docs/platform/ui-extension-components" }, "UI components"), " ", "and", " ", /* @__PURE__ */ React2.createElement(Link, { href: "https://developers.hubspot.com/docs/platform/ui-extensions-overview" }, "UI extensions"), "."));
  };
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
